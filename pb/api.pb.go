// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package ZMDev_Noxus_pb is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	AppValidateRes
	AppCredential
	AppID
	ImageURL
	Application
	AppListReq
	AppList
*/
package ZMDev_Noxus_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AppValidateRes struct {
	IsValid bool `protobuf:"varint,1,opt,name=isValid" json:"isValid,omitempty"`
}

func (m *AppValidateRes) Reset()                    { *m = AppValidateRes{} }
func (m *AppValidateRes) String() string            { return proto.CompactTextString(m) }
func (*AppValidateRes) ProtoMessage()               {}
func (*AppValidateRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AppValidateRes) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

type AppCredential struct {
	Id     int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
}

func (m *AppCredential) Reset()                    { *m = AppCredential{} }
func (m *AppCredential) String() string            { return proto.CompactTextString(m) }
func (*AppCredential) ProtoMessage()               {}
func (*AppCredential) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppCredential) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppCredential) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type AppID struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *AppID) Reset()                    { *m = AppID{} }
func (m *AppID) String() string            { return proto.CompactTextString(m) }
func (*AppID) ProtoMessage()               {}
func (*AppID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AppID) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ImageURL struct {
	Original string `protobuf:"bytes,1,opt,name=original" json:"original,omitempty"`
	Xs       string `protobuf:"bytes,2,opt,name=xs" json:"xs,omitempty"`
	Sm       string `protobuf:"bytes,3,opt,name=sm" json:"sm,omitempty"`
	Md       string `protobuf:"bytes,4,opt,name=md" json:"md,omitempty"`
	Lg       string `protobuf:"bytes,5,opt,name=lg" json:"lg,omitempty"`
}

func (m *ImageURL) Reset()                    { *m = ImageURL{} }
func (m *ImageURL) String() string            { return proto.CompactTextString(m) }
func (*ImageURL) ProtoMessage()               {}
func (*ImageURL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ImageURL) GetOriginal() string {
	if m != nil {
		return m.Original
	}
	return ""
}

func (m *ImageURL) GetXs() string {
	if m != nil {
		return m.Xs
	}
	return ""
}

func (m *ImageURL) GetSm() string {
	if m != nil {
		return m.Sm
	}
	return ""
}

func (m *ImageURL) GetMd() string {
	if m != nil {
		return m.Md
	}
	return ""
}

func (m *ImageURL) GetLg() string {
	if m != nil {
		return m.Lg
	}
	return ""
}

type Application struct {
	Id          int32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	LogoHash    string    `protobuf:"bytes,2,opt,name=logo_hash,json=logoHash" json:"logo_hash,omitempty"`
	LogoUrl     *ImageURL `protobuf:"bytes,3,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
	UserId      int64     `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Url         string    `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Name        string    `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Description string    `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	Revoked     bool      `protobuf:"varint,8,opt,name=revoked" json:"revoked,omitempty"`
	CreatedAt   int64     `protobuf:"varint,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt   int64     `protobuf:"varint,10,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	DeletedAt   int64     `protobuf:"varint,11,opt,name=deleted_at,json=deletedAt" json:"deleted_at,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Application) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Application) GetLogoHash() string {
	if m != nil {
		return m.LogoHash
	}
	return ""
}

func (m *Application) GetLogoUrl() *ImageURL {
	if m != nil {
		return m.LogoUrl
	}
	return nil
}

func (m *Application) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Application) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Application) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Application) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Application) GetRevoked() bool {
	if m != nil {
		return m.Revoked
	}
	return false
}

func (m *Application) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Application) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Application) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

type AppListReq struct {
	PerPage int32 `protobuf:"varint,2,opt,name=per_page,json=perPage" json:"per_page,omitempty"`
	Page    int32 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
}

func (m *AppListReq) Reset()                    { *m = AppListReq{} }
func (m *AppListReq) String() string            { return proto.CompactTextString(m) }
func (*AppListReq) ProtoMessage()               {}
func (*AppListReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AppListReq) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *AppListReq) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type AppList struct {
	Apps []*Application `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
}

func (m *AppList) Reset()                    { *m = AppList{} }
func (m *AppList) String() string            { return proto.CompactTextString(m) }
func (*AppList) ProtoMessage()               {}
func (*AppList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AppList) GetApps() []*Application {
	if m != nil {
		return m.Apps
	}
	return nil
}

func init() {
	proto.RegisterType((*AppValidateRes)(nil), "ZMDev.Noxus.pb.AppValidateRes")
	proto.RegisterType((*AppCredential)(nil), "ZMDev.Noxus.pb.AppCredential")
	proto.RegisterType((*AppID)(nil), "ZMDev.Noxus.pb.AppID")
	proto.RegisterType((*ImageURL)(nil), "ZMDev.Noxus.pb.ImageURL")
	proto.RegisterType((*Application)(nil), "ZMDev.Noxus.pb.Application")
	proto.RegisterType((*AppListReq)(nil), "ZMDev.Noxus.pb.AppListReq")
	proto.RegisterType((*AppList)(nil), "ZMDev.Noxus.pb.AppList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppService service

type AppServiceClient interface {
	Validate(ctx context.Context, in *AppCredential, opts ...grpc.CallOption) (*AppValidateRes, error)
	Find(ctx context.Context, in *AppID, opts ...grpc.CallOption) (*Application, error)
	List(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*AppList, error)
}

type appServiceClient struct {
	cc *grpc.ClientConn
}

func NewAppServiceClient(cc *grpc.ClientConn) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) Validate(ctx context.Context, in *AppCredential, opts ...grpc.CallOption) (*AppValidateRes, error) {
	out := new(AppValidateRes)
	err := grpc.Invoke(ctx, "/ZMDev.Noxus.pb.AppService/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) Find(ctx context.Context, in *AppID, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := grpc.Invoke(ctx, "/ZMDev.Noxus.pb.AppService/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) List(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*AppList, error) {
	out := new(AppList)
	err := grpc.Invoke(ctx, "/ZMDev.Noxus.pb.AppService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppService service

type AppServiceServer interface {
	Validate(context.Context, *AppCredential) (*AppValidateRes, error)
	Find(context.Context, *AppID) (*Application, error)
	List(context.Context, *AppListReq) (*AppList, error)
}

func RegisterAppServiceServer(s *grpc.Server, srv AppServiceServer) {
	s.RegisterService(&_AppService_serviceDesc, srv)
}

func _AppService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCredential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZMDev.Noxus.pb.AppService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).Validate(ctx, req.(*AppCredential))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZMDev.Noxus.pb.AppService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).Find(ctx, req.(*AppID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZMDev.Noxus.pb.AppService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).List(ctx, req.(*AppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ZMDev.Noxus.pb.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _AppService_Validate_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _AppService_Find_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AppService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x5b, 0xab, 0x13, 0x3f,
	0x10, 0xef, 0x7d, 0x77, 0xa7, 0xfc, 0xcb, 0x9f, 0x80, 0x36, 0xf6, 0x70, 0xa4, 0xec, 0x53, 0xf1,
	0xa1, 0x42, 0xcf, 0x83, 0xe0, 0xe5, 0x61, 0xb1, 0x88, 0xc5, 0xa3, 0x48, 0xe4, 0xf8, 0xe0, 0x4b,
	0xc9, 0x69, 0xc6, 0x6d, 0x70, 0x2f, 0x31, 0x49, 0x4b, 0xbf, 0xa1, 0xdf, 0xc0, 0xcf, 0x23, 0xc9,
	0xa6, 0x5a, 0x8f, 0xd5, 0xb7, 0xf9, 0x5d, 0x66, 0x67, 0x32, 0x33, 0x0b, 0x09, 0x57, 0x72, 0xae,
	0x74, 0x6d, 0x6b, 0x32, 0xfa, 0xf4, 0x76, 0x89, 0xfb, 0xf9, 0xbb, 0xfa, 0xb0, 0x33, 0x73, 0x75,
	0x9b, 0x3e, 0x82, 0x51, 0xa6, 0xd4, 0x47, 0x5e, 0x48, 0xc1, 0x2d, 0x32, 0x34, 0x84, 0x42, 0x24,
	0x8d, 0x27, 0x68, 0x7b, 0xda, 0x9e, 0xc5, 0xec, 0x08, 0xd3, 0x27, 0xf0, 0x5f, 0xa6, 0xd4, 0x4b,
	0x8d, 0x02, 0x2b, 0x2b, 0x79, 0x41, 0x46, 0xd0, 0x09, 0xae, 0x3e, 0xeb, 0x48, 0x41, 0xee, 0xc3,
	0xc0, 0xe0, 0x46, 0xa3, 0xa5, 0x9d, 0x69, 0x7b, 0x96, 0xb0, 0x80, 0xd2, 0x31, 0xf4, 0x33, 0xa5,
	0x56, 0xcb, 0xbb, 0x09, 0xe9, 0x67, 0x88, 0x57, 0x25, 0xcf, 0xf1, 0x86, 0x5d, 0x93, 0x09, 0xc4,
	0xb5, 0x96, 0xb9, 0xac, 0x78, 0xe1, 0x1d, 0x09, 0xfb, 0x89, 0x5d, 0xde, 0xc1, 0x84, 0x8f, 0x76,
	0x0e, 0xc6, 0x61, 0x53, 0xd2, 0x6e, 0x83, 0x4d, 0xe9, 0x70, 0x29, 0x68, 0xaf, 0xc1, 0xa5, 0x70,
	0xb8, 0xc8, 0x69, 0xbf, 0xc1, 0x45, 0x9e, 0x7e, 0xeb, 0xc0, 0x30, 0x53, 0xaa, 0x90, 0x1b, 0x6e,
	0x65, 0x5d, 0xfd, 0xd1, 0xf8, 0x05, 0x24, 0x45, 0x9d, 0xd7, 0xeb, 0x2d, 0x37, 0xdb, 0x50, 0x26,
	0x76, 0xc4, 0x6b, 0x6e, 0xb6, 0xe4, 0x0a, 0x7c, 0xbc, 0xde, 0xe9, 0xc2, 0x97, 0x1c, 0x2e, 0xe8,
	0xfc, 0xf7, 0x29, 0xce, 0x8f, 0x8f, 0x60, 0x91, 0x73, 0xde, 0xe8, 0x82, 0x8c, 0x21, 0xda, 0x19,
	0xd4, 0x6b, 0xd9, 0xb4, 0xd5, 0x65, 0x03, 0x07, 0x57, 0x82, 0xfc, 0x0f, 0x5d, 0xf7, 0xa1, 0xa6,
	0x37, 0x17, 0x12, 0x02, 0xbd, 0x8a, 0x97, 0x48, 0x07, 0x9e, 0xf2, 0x31, 0x99, 0xc2, 0x50, 0xa0,
	0xd9, 0x68, 0xa9, 0x5c, 0xbf, 0x34, 0xf2, 0xd2, 0x29, 0xe5, 0xd6, 0xa4, 0x71, 0x5f, 0x7f, 0x41,
	0x41, 0xe3, 0x66, 0x4d, 0x01, 0x92, 0x4b, 0x80, 0x8d, 0x46, 0x6e, 0x51, 0xac, 0xb9, 0xa5, 0x89,
	0xaf, 0x9e, 0x04, 0x26, 0xb3, 0x4e, 0xde, 0x29, 0x71, 0x94, 0xa1, 0x91, 0x03, 0xd3, 0xc8, 0x02,
	0x0b, 0x0c, 0xf2, 0xb0, 0x91, 0x03, 0x93, 0xd9, 0xf4, 0x19, 0x40, 0xa6, 0xd4, 0xb5, 0x34, 0x96,
	0xe1, 0x57, 0xf2, 0x00, 0x62, 0x85, 0x7a, 0xad, 0x78, 0x8e, 0x7e, 0x6c, 0x7d, 0x16, 0x29, 0xd4,
	0xef, 0x79, 0x8e, 0xee, 0x55, 0x9e, 0xee, 0x7a, 0xda, 0xc7, 0xe9, 0x53, 0x88, 0x42, 0x32, 0x79,
	0x0c, 0x3d, 0xae, 0x94, 0xa1, 0xed, 0x69, 0x77, 0x36, 0x5c, 0x5c, 0xdc, 0x1d, 0xe8, 0xc9, 0xb2,
	0x98, 0x37, 0x2e, 0xbe, 0xb7, 0x7d, 0xe5, 0x0f, 0xa8, 0xf7, 0x72, 0x83, 0xe4, 0x0d, 0xc4, 0xc7,
	0xa3, 0x25, 0x97, 0x67, 0xb2, 0x7f, 0x5d, 0xe9, 0xe4, 0xe1, 0x19, 0xf9, 0xe4, 0xe0, 0xd3, 0x16,
	0x79, 0x0e, 0xbd, 0x57, 0xb2, 0x12, 0xe4, 0xde, 0x19, 0xe7, 0x6a, 0x39, 0xf9, 0x57, 0x77, 0x69,
	0x8b, 0xbc, 0x80, 0x9e, 0x7f, 0xd2, 0xe4, 0x8c, 0x2d, 0x0c, 0x6a, 0x32, 0xfe, 0x8b, 0x96, 0xb6,
	0x6e, 0x07, 0xfe, 0xc7, 0xbc, 0xfa, 0x11, 0x00, 0x00, 0xff, 0xff, 0x36, 0x2f, 0x87, 0x4b, 0xa5,
	0x03, 0x00, 0x00,
}
