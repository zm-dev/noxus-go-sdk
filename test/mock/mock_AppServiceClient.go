// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zm-dev/noxus-go-sdk/pb (interfaces: AppServiceClient)

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pb "github.com/zm-dev/noxus-go-sdk/pb"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAppServiceClient is a mock of AppServiceClient interface
type MockAppServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAppServiceClientMockRecorder
}

// MockAppServiceClientMockRecorder is the mock recorder for MockAppServiceClient
type MockAppServiceClientMockRecorder struct {
	mock *MockAppServiceClient
}

// NewMockAppServiceClient creates a new mock instance
func NewMockAppServiceClient(ctrl *gomock.Controller) *MockAppServiceClient {
	mock := &MockAppServiceClient{ctrl: ctrl}
	mock.recorder = &MockAppServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppServiceClient) EXPECT() *MockAppServiceClientMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockAppServiceClient) Find(arg0 context.Context, arg1 *pb.AppID, arg2 ...grpc.CallOption) (*pb.Application, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(*pb.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockAppServiceClientMockRecorder) Find(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAppServiceClient)(nil).Find), varargs...)
}

// List mocks base method
func (m *MockAppServiceClient) List(arg0 context.Context, arg1 *pb.AppListReq, arg2 ...grpc.CallOption) (*pb.AppList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*pb.AppList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAppServiceClientMockRecorder) List(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAppServiceClient)(nil).List), varargs...)
}

// Validate mocks base method
func (m *MockAppServiceClient) Validate(arg0 context.Context, arg1 *pb.AppCredential, arg2 ...grpc.CallOption) (*pb.AppValidateRes, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Validate", varargs...)
	ret0, _ := ret[0].(*pb.AppValidateRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockAppServiceClientMockRecorder) Validate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockAppServiceClient)(nil).Validate), varargs...)
}
